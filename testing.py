# %%
import getpass
from langchain_core.prompts import ChatPromptTemplate
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain.chains import create_retrieval_chain
from langchain_google_genai import ChatGoogleGenerativeAI
from dotenv import load_dotenv
from langchain_google_genai import GoogleGenerativeAIEmbeddings
from langchain_chroma import Chroma
from getpass import getpass  # Import the getpass() FUNCTION
import os
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.document_loaders import PyPDFLoader
# ! pip install pypdf
# ! pip install langchain-community
# ! pip install langchain-chroma
# ! pip install langchain-google-genai

# %%

loader = PyPDFLoader("yolov9_paper.pdf")
data = loader.load()  # entire PDF is loaded as a single Document
# data


# %%
len(data)

# %%

# split data
text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000)
docs = text_splitter.split_documents(data)


print("Total number of documents: ", len(docs))

# %%
docs[7]

# %%

# %%

load_dotenv()

# Get an API key:
# Head to https://ai.google.dev/gemini-api/docs/api-key to generate a Google AI API key. Paste in .env file

# Embedding models: https://python.langchain.com/v0.1/docs/integrations/text_embedding/


def getEmbedding():
    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
    return embeddings
# vector

# %%


def vectorDB(texts):
    persist_directory = 'db'
    # Here is the new embeddings being used
    embedding = "hf"

    vectordb = Chroma.from_documents(documents=texts,
                                    embedding=getEmbedding(),
                                    persist_directory=persist_directory)

    # persiste the db to disk
    vectordb = None

    vectordb = Chroma(persist_directory=persist_directory,
                    embedding_function=getEmbedding())
    return vectordb


# %%
vectordb=vectorDB(docs)

# %%
retriever = vectordb.as_retriever(
    search_type="similarity", search_kwargs={"k": 10})

retrieved_docs = retriever.invoke("What is new in yolov9?")


# %%
len(retrieved_docs)

# %%
# print(retrieved_docs[5].page_content)

# %%

llm = ChatGoogleGenerativeAI(
    model="gemini-1.5-pro", temperature=0.3, max_tokens=500)

# %%

system_prompt = (
    "You are an assistant for question-answering tasks. "
    "Use the following pieces of retrieved context to answer "
    "the question. If you don't know the answer, say that you "
    "don't know. Use three sentences maximum and keep the "
    "answer concise."
    "\n\n"
    "{context}"
)

prompt = ChatPromptTemplate.from_messages(
    [
        ("system", system_prompt),
        ("human", "{input}"),
    ]
)

# %%
question_answer_chain = create_stuff_documents_chain(llm, prompt)
rag_chain = create_retrieval_chain(retriever, question_answer_chain)

# %%
response = rag_chain.invoke({"input": "describe about this pdf "})
print(response["answer"])

# %%
# !pip install - qU langchain-tavily

# %%

if not os.environ.get("TAVILY_API_KEY"):
    os.environ["TAVILY_API_KEY"] = getpass.getpass("Tavily API key:\n")

# %%
from langchain_tavily import TavilySearch

tool = TavilySearch(
    max_results=5,
    topic="general",
    # include_answer=False,
    # include_raw_content=False,
    # include_images=False,
    # include_image_descriptions=False,
    # search_depth="basic",
    # time_range="day",
    # include_domains=None,
    # exclude_domains=None
)

# %%
tool.invoke({"query": "What happened at the last wimbledon"})

# %%
# This is usually generated by a model, but we'll create a tool call directly for demo purposes.
model_generated_tool_call = {
    "args": {"query": "euro 2024 host nation"},
    "id": "1",
    "name": "tavily",
    "type": "tool_call",
}
tool_msg = tool.invoke(model_generated_tool_call)

# The content is a JSON string of results
print(tool_msg.content[:400])


